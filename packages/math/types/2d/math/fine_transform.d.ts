import { Vector2 } from './vec2';
export declare class Transform {
    static identity(): Transform;
    static default(): Transform;
    static from_row(a: number, b: number, c: number, d: number, tx: number, ty: number): Transform;
    static from_translate(tx: number, ty: number): Transform;
    static from_scale(sx: number, sy: number): Transform;
    static from_skew(kx: number, ky: number): Transform;
    static from_rotate(angle: number): Transform;
    static from_rotate_at(angle: number, tx: number, ty: number): Transform;
    static from_sin_cos(sin: number, cos: number): Transform;
    static from_bbox(bbox: any): Transform;
    elements: Float32Array;
    constructor(elements: Float32Array | number[]);
    get sx(): number;
    set sx(value: number);
    get sy(): number;
    set sy(value: number);
    get kx(): number;
    set kx(value: number);
    get ky(): number;
    set ky(value: number);
    get tx(): number;
    set tx(value: number);
    get ty(): number;
    set ty(value: number);
    copy(source: Transform): this;
    clone(): Transform;
    is_finite(): boolean;
    is_valid(): boolean;
    is_identity(): boolean;
    is_scale(): boolean;
    is_skew(): boolean;
    is_translate(): boolean;
    is_scale_translate(): boolean;
    has_scale(): boolean;
    has_skew(): boolean;
    has_translate(): boolean;
    get_scale(): Vector2;
    pre_scale(sx: number, sy: number): Transform;
    post_scale(sx: number, sy: number): Transform;
    pre_translate(tx: number, ty: number): Transform;
    post_translate(tx: number, ty: number): Transform;
    pre_rotate(angle: number): Transform;
    post_rotate(angle: number): Transform;
    pre_rotate_at(angle: number, x: number, y: number): Transform;
    post_rotate_at(angle: number, x: number, y: number): Transform;
    pre_concat(other: Transform): Transform;
    post_concat(other: Transform): Transform;
    map_point(point: Vector2): void;
    map_points(outPoints: Vector2[], srcPoints: Vector2[]): void;
    invert(): Transform;
}
